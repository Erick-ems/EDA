// Definição da estrutura da célula da lista encadeada
// Um campo para armazenar dados inteiros
// Um ponteiro para a próxima célula na lista

// Função para contar o número de células de forma recursiva
// Caso base: a lista está vazia, então retorna 0
// Chamada recursiva para a próxima célula
// Libera a memória da célula atual
// Retorna o número total de células na lista

// Exemplo de criação de uma lista encadeada simples
// Cria um ponteiro 'head' para a lista e o inicializa como nulo
// Cria um ponteiro 'second' para a segunda célula e o inicializa como nulo
// Cria um ponteiro 'third' para a terceira célula e o inicializa como nulo

// Aloca memória para a primeira célula e atribui o endereço a 'head'
// Aloca memória para a segunda célula e atribui o endereço a 'second'
// Aloca memória para a terceira célula e atribui o endereço a 'third'

// Define o valor de 'data' da primeira célula como 1
// Define 'next' da primeira célula para apontar para 'second'

// Define o valor de 'data' da segunda célula como 2
// Define 'next' da segunda célula para apontar para 'third'

// Define o valor de 'data' da terceira célula como 3
// Define 'next' da terceira célula como nulo, indicando o final da lista

// Chame a função para contar as células
// Chama a função 'countCellsRecursive' com a lista encadeada como argumento
// Exibe o número de células na lista
// Retorna 0 para indicar que o programa foi concluído com sucesso
